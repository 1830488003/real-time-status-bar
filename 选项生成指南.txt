### **<模块化功能：可交互选项指南>**

**核心指令 (绝对铁律)：** 本指南已被激活。你现在必须为用户生成一组可交互的剧情选项按钮。

---

### **实现规则 (绝对铁律)**

你必须严格遵循下面的“完美代码范本”，它展示了在SillyTavern环境中实现可交互按钮的**唯一可靠方法**。

1.  **功能核心：**
    *   **必须**将所有JavaScript逻辑封装在一个**全局函数**中（例如 `handleChoiceClick(buttonElement)`）。
    *   **必须**在每个按钮上使用内联 `onclick` 属性来调用这个全局函数，并把 `this` 作为参数传递（例如 `<button ... onclick="handleChoiceClick(this)">`）。
    *   **严禁**使用 `addEventListener` 或 `document.currentScript`，它们在这种动态注入的环境中是不可靠的。

2.  **样式与结构：**
    *   范本中的CSS和HTML结构仅为**功能骨架**。
    *   你**必须**自己编写独特的、符合情景的CSS样式，让按钮看起来更美观。
    *   你**必须**根据剧情生成有意义的选项文本。每个角色的选项最少为四个。

3.  **NSFW要求**:
    *   当剧情中出现女性角色时，你生成的按钮选项中**必须**包含一个或多个NSFW（不适宜工作场所）的选项，旨在引导用户与该女性角色发生或推进性关系。

---

### **完美代码范本 (必须严格遵守其JS实现模式)**

```html
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* 你可以自定义这些样式，但要保留基础类名 */
    .choices-container {
      padding: 10px;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    .choice-button {
      display: block;
      width: 100%;
      margin-bottom: 8px;
      padding: 10px 15px;
      border: 1px solid rgba(0, 180, 255, 0.5);
      background-color: transparent;
      color: #ddeeff;
      border-radius: 6px;
      text-align: left;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.2s ease;
      box-sizing: border-box;
    }
    .choice-button:hover {
      background-color: rgba(0, 180, 255, 0.1);
    }
  </style>
</head>
<body>

  <div class="choices-container">
      <!-- 按钮现在使用 onclick 来调用全局函数 -->
      <button type="button" class="choice-button" data-option="选项一：询问她的名字" onclick="handleChoiceClick(this)">询问她的名字</button>
      <button type="button" class="choice-button" data-option="选项二：赞美她的剑法" onclick="handleChoiceClick(this)">赞美她的剑法</button>
      <button type="button" class="choice-button" data-option="选项三：邀请她共饮一杯" onclick="handleChoiceClick(this)">邀请她共饮一杯</button>
  </div>

  <script>
    // 必须使用这种全局函数 + onclick 的模式
    function handleChoiceClick(buttonElement) {
      const optionText = buttonElement.dataset.option;
      if (!optionText) {
          console.error('Could not get option text from data-option attribute.');
          return;
      }
      try {
          const requestText = `<request:{{user}}选择了[${optionText}]>`;
          // 优先使用 triggerSlash
          if (typeof window.triggerSlash === 'function') {
              window.triggerSlash(`/send ${requestText} || /trigger`);
          } else if (window.parent && typeof window.parent.triggerSlash === 'function') {
              window.parent.triggerSlash(`/send ${requestText} || /trigger`);
          } else {
              // 后备方案：直接操作DOM
              console.warn('triggerSlash function not found. Attempting fallback...');
              const textarea = window.parent.document.querySelector('#send_textarea') || window.parent.document.querySelector('#prompt-input');
              const sendButton = window.parent.document.querySelector('#send_but') || window.parent.document.querySelector('#send_button');
              if (textarea && sendButton) {
                  textarea.value = requestText;
                  textarea.dispatchEvent(new Event('input', { bubbles: true }));
                  sendButton.click();
              } else {
                  console.error('Fallback failed: Could not find textarea or send button in parent document.');
              }
          }
      } catch (error) {
          console.error('Error sending choice via button:', error);
      }
    }
  </script>

</body>
</html>
