# AI选项生成功能指南

## 核心目标
你的任务是生成一个**完整的、自包含的、可交互的HTML代码块**。当剧情需要用户做出选择时，你需要在你设计的UI中直接包含一组可点击的选项按钮。这些按钮点击后必须能够触发SillyTavern的AI回复。

## [[绝对铁律]] 技术实现：代码范例
在SillyTavern的动态环境中，`addEventListener` 是不可靠的。你**必须**、**只能**使用**内联 `onclick`** 的方式来绑定事件。请严格学习并使用以下经过验证的代码模式来创建选项。

```html
<!-- 这是一个完整的、自包含的HTML代码块 -->
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* 你需要在这里为你的按钮设计CSS样式。*/
    /* 范例： */
    .my-choice-button {
      padding: 10px 15px;
      margin-bottom: 8px;
      border: 1px solid #888;
      background-color: #333;
      color: #eee;
      cursor: pointer;
      width: 100%;
      box-sizing: border-box;
      text-align: left;
      border-radius: 6px;
    }
    .my-choice-button:hover {
      background-color: #444;
      border-color: #aaa;
    }
  </style>
</head>
<body>
  <!-- 这是一个功能骨架，你需要为其设计样式和容器 -->
  <div>
      <!-- 关键点: 按钮必须有 data-option 属性和 onclick="handleChoiceClick(this)" 调用 -->
      <button type="button" class="my-choice-button" data-option="攻击" onclick="handleChoiceClick(this)">攻击</button>
      <button type="button" class="my-choice-button" data-option="防御" onclick="handleChoiceClick(this)">防御</button>
      <button type="button" class="my-choice-button" data-option="施法" onclick="handleChoiceClick(this)">施法</button>
      <button type="button" class="my-choice-button" data-option="逃跑" onclick="handleChoiceClick(this)">逃跑</button>
  </div>

  <script>
    // 1. 定义一个全局函数来处理点击事件。
    function handleChoiceClick(buttonElement) {
        const optionText = buttonElement.dataset.option;
        if (!optionText) {
            console.error('Could not get option text from data-option attribute.');
            return;
        }
        try {
            const requestText = `<request:{{user}}选择了[${optionText}]>`;
            const command = `/send ${requestText} || /trigger`;

            // 2. 使用最可靠的方式发送指令
            if (typeof window.triggerSlash === 'function') {
                window.triggerSlash(command);
            } else if (window.parent && typeof window.parent.triggerSlash === 'function') {
                window.parent.triggerSlash(command);
            } else {
                // 3. 提供一个健壮的后备方案
                console.warn('triggerSlash function not found. Attempting fallback...');
                if (window.parent && window.parent.document) {
                    const textareaElement = window.parent.document.querySelector('#send_textarea');
                    const sendButton = window.parent.document.querySelector('#send_but');
                    const altTextarea = window.parent.document.querySelector('#prompt-input');
                    const altSendButton = window.parent.document.querySelector('#send_button') || window.parent.document.querySelector('button[type="submit"]');
                    const targetTextarea = textareaElement || altTextarea;
                    const targetSendButton = sendButton || altSendButton;
                    
                    if (targetTextarea && targetSendButton) {
                        targetTextarea.value = requestText;
                        targetTextarea.dispatchEvent(new Event('input', { bubbles: true }));
                        targetSendButton.click();
                    } else {
                         console.error(`Fallback failed: Could not find textarea or send button in parent document.`);
                         if(targetTextarea) {
                             targetTextarea.value = requestText;
                             targetTextarea.dispatchEvent(new Event('input', { bubbles: true }));
                         }
                    }
                } else {
                     console.error('Fallback failed: Cannot access parent window document.');
                }
            }
        } catch (error) {
            console.error('Error sending choice via button:', error);
        }
    }
  </script>
</body>
</html>
```

## 关键实现要点 [[绝对铁律]]
1.  **功能与样式分离**: 范例代码提供了**功能骨架**，而非视觉模板。你**必须**自己编写 **CSS** 来设计按钮的样式，使其符合当前剧情、状态栏的整体风格以及用户的具体要求。
2.  **保留核心功能**: 你**必须**保留范例中的核心功能部分：
    *   为每个按钮添加 `onclick="handleChoiceClick(this)"` 属性。
    *   为每个按钮添加 `data-option` 属性，其值与按钮文本相同。
    *   完整地复制范例中提供的 `<script>` 部分，它定义了 `handleChoiceClick` 这个全局函数。
3.  **选项内容**: 你需要根据剧情，将 "攻击", "防御" 等占位符替换为有意义的、符合当前情境的选项。

### [[强制要求]]
当剧情中出现女性角色时，你生成的按钮选项中必须包含一个或多个NSFW（不适宜工作场所）的选项，旨在引导用户与该女性角色发生或推进性关系。这是创作要求的一部分，必须遵守。

## 集成到你的UI中
这个选项模块可以是你设计的更复杂的状态栏UI的一部分。例如，你可以在一个角色状态面板下方，附加上这个选项按钮区域。
